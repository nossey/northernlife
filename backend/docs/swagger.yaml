basePath: /api/v1
definitions:
  model.ErrorMessage:
    properties:
      message:
        type: string
    type: object
  model.Login:
    properties:
      password:
        type: string
      userID:
        type: string
    required:
    - password
    - userID
    type: object
  model.LoginFailMessage:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.LoginSuccessMessage:
    properties:
      expired_at:
        type: string
      token:
        type: string
    type: object
  model.Post:
    properties:
      body:
        type: string
      created_at:
        type: string
      id:
        type: string
      plain_body:
        type: string
      published:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.PostListModel:
    properties:
      per_page_count:
        type: integer
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
      total_count:
        type: integer
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginSuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.LoginFailMessage'
      summary: Login
      tags:
      - Auth
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostListModel'
      summary: Get posts with pagination
      tags:
      - Posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Get single post with specific id
      tags:
      - Posts
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
