basePath: /api/v1
definitions:
  model.AdminPostCreateModel:
    properties:
      body:
        type: string
      plainBody:
        type: string
      published:
        type: boolean
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      title:
        type: string
    required:
    - body
    - plainBody
    - published
    - tags
    - thumbnail
    - title
    type: object
  model.AdminPostListItem:
    properties:
      body:
        type: string
      createdAt:
        type: string
      id:
        type: string
      plainBody:
        type: string
      published:
        type: boolean
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  model.AdminPostListModel:
    properties:
      perPageCount:
        type: integer
      posts:
        items:
          $ref: '#/definitions/model.AdminPostListItem'
        type: array
      totalCount:
        type: integer
    type: object
  model.AdminTagsCreateModel:
    properties:
      tagName:
        type: string
    required:
    - tagName
    type: object
  model.AdminTagsCreateResult:
    properties:
      tagName:
        type: string
    type: object
  model.AdminTagsGetModel:
    properties:
      tags:
        items:
          type: string
        type: array
    type: object
  model.ErrorMessage:
    properties:
      message:
        type: string
    type: object
  model.FileImageUploadModel:
    properties:
      image:
        type: string
    required:
    - image
    type: object
  model.FileImageUploadSuccessResultModel:
    properties:
      url:
        type: string
    type: object
  model.Login:
    properties:
      password:
        type: string
      userID:
        type: string
    required:
    - password
    - userID
    type: object
  model.LoginSuccessMessage:
    properties:
      expiredAt:
        type: string
      token:
        type: string
    type: object
  model.PostCreateResult:
    properties:
      postID:
        type: string
    type: object
  model.PostDeleteResult:
    properties:
      postID:
        type: string
    type: object
  model.PostListItem:
    properties:
      body:
        type: string
      createdAt:
        type: string
      id:
        type: string
      plainBody:
        type: string
      published:
        type: boolean
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  model.PostListModel:
    properties:
      perPageCount:
        type: integer
      posts:
        items:
          $ref: '#/definitions/model.PostListItem'
        type: array
      totalCount:
        type: integer
    type: object
  model.PostSingleItem:
    properties:
      body:
        type: string
      createdAt:
        type: string
      id:
        type: string
      plainBody:
        type: string
      published:
        type: boolean
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  model.PostUpdateModel:
    properties:
      body:
        type: string
      plainBody:
        type: string
      published:
        type: boolean
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      title:
        type: string
    required:
    - body
    - plainBody
    - published
    - tags
    - thumbnail
    - title
    type: object
  model.PostUpdateResult:
    properties:
      postID:
        type: string
    type: object
  model.UnauthorizedMessage:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.User:
    properties:
      userID:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /admin/posts:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: string enums
        enum:
        - all
        - published
        - draft
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AdminPostListModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
      security:
      - ApiKeyAuth: []
      summary: Get posts with pagination
      tags:
      - AdminPosts
    post:
      consumes:
      - application/json
      parameters:
      - description: Post Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.AdminPostCreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.PostCreateResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
      security:
      - ApiKeyAuth: []
      summary: Create single post
      tags:
      - AdminPosts
  /admin/posts/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/model.PostDeleteResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete single post
      tags:
      - AdminPosts
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostSingleItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get single post with specific id
      tags:
      - AdminPosts
    put:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.PostUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostUpdateResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Update single post
      tags:
      - AdminPosts
  /admin/tags:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AdminTagsGetModel'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
      security:
      - ApiKeyAuth: []
      summary: Get Tags
      tags:
      - AdminTags
    post:
      consumes:
      - application/json
      parameters:
      - description: Tag Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.AdminTagsCreateModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AdminTagsCreateResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get Tags
      tags:
      - AdminTags
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginSuccessMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.UnauthorizedMessage'
      summary: Login
      tags:
      - Auth
  /auth/user:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Auth
  /contents:
    post:
      consumes:
      - application/json
      parameters:
      - description: Image Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.FileImageUploadModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.FileImageUploadSuccessResultModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Upload a image file of base64 encoded data url type
      tags:
      - Contents
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Tags
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostListModel'
      summary: Get posts with pagination
      tags:
      - Posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostSingleItem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Get single post with specific id
      tags:
      - Posts
  /tags:
    get:
      consumes:
      - application/json
      description: Get all tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get tags
      tags:
      - Tags
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
